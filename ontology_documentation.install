<?php

// Definisco il nome del modulo da includere
define('MODULE_NAME', 'ontology_documentation');
// Definisco il percorso del modulo
define('MODULE_FILE_PATH', drupal_get_path('module', MODULE_NAME));
// Definisco il nome del modulo da includere
define('MODULE_FILE', MODULE_NAME . '.module');
// Includo il modulo
require_once DRUPAL_ROOT. '/' . MODULE_FILE_PATH . '/' . MODULE_FILE;

//Definisce i bundles da applicare ai campi rilevanti
$all_bundles = ontology_documentation_get_bundles();
$role_attribute_bundles = ontology_documentation_get_bundles('WITH_DOMAIN_AND_CODOMAIN');
$concept_role_bundles = ontology_documentation_get_bundles('WITH_INHERITANCE');
$concept_bundles = ontology_documentation_get_bundles('WITH_ATTRIBUTES_AND_ROLES');

//Specifica quali bundles posseggono quali campi
global $bundles_fields;
$bundles_fields = array(
  'categoria' => $all_bundles,
  'occorrenza' => $all_bundles,
  'etichetta' => $all_bundles,
  'specializzazioni' => $concept_role_bundles,
  'generalizzazioni' => $concept_role_bundles,
  'dominio' => $role_attribute_bundles,
  'codominio' => $role_attribute_bundles,
  'attributi_obbligatori' => $concept_bundles,
  'attributi_non_obbligatori' => $concept_bundles,
  'ruoli_obbligatori' => $concept_bundles,
  'ruoli_non_obbligatori' => $concept_bundles,
  'assiomi' => $all_bundles,
  'link_obda' => $all_bundles,
  'mappings' => $all_bundles,
);

// Dati per ontology_documentation_type
global $ontology_documentation_type_data;
$ontology_documentation_type_data = array(
  'category' => '',
  'name' => '',
  'description' => '',
);

//Base per l'array del campo
global  $base_field;
$base_field = array(
  'field_name' => '',
  'type' => 'text_long',
  'cardinality' => 1,
  'translatable' => 1,
);

//Base per l'array di istanza del campo
global $base_field_instance;
$base_field_instance = array(
  'field_name' => '',
  'entity_type' => ENTITY_TYPE,
  'bundle' => '',
  'widget' => array('type' => 'text_textarea'),
  'settings' => array('text_processing' => 1),
  'format' => 'filter_html',
  'required' => TRUE,
);

//Memorizza tutte le instanze dei campi da rimuovere
global $field_instances;
$field_instances = array();

// Crea i campi rilevanti per ogni bundle.
// Ceea le istanze per ogni bundle.
function ontology_documentation_enable() {

  global $bundles_fields, $base_field;
  global $base_field_instance, $field_instances;
  global $ontology_documentation_type_data;

  $ontology_type_data = &$ontology_documentation_type_data;
  $term_field =  &$base_field;
  $bundle_instance = &$base_field_instance;

  // Popolo ontology_documentation_type
  foreach(ontology_documentation_get_bundles() as $bundle) {
    $ontology_type_data['category'] = $bundle['machine_name'];
    $ontology_type_data['name'] = $bundle['human_label'];
    $ontology_type_data['description'] = $bundle['description'];
    try {
      if(empty(entity_load_multiple_by_name('ontology_documentation_type', array($bundle['machine_name'])))) {
        $ontology_type_entity = entity_create('ontology_documentation_type', $ontology_type_data);
        if(is_object($ontology_type_entity))
          $ontology_type_entity->save();
        else
          drupal_set_message('Error: entity_create()!', 'error');
      }
    }
    catch(Exception $e) {
      drupal_set_message($e->getMessage(), 'error');
    }
  }

  // Creo i campi e le istanze
  foreach ($bundles_fields as $field => $bundles) {
    //Assegno il nome al campo
    $term_field['field_name'] = $field;
    //Creo il campo
    field_create_field($term_field);
    //Creo le istanze dei campi da assegnare ai bundles
    foreach ($bundles as $bundle) {
      //Assegno il nome del campo e il nome del bundle per l'istanza
      $bundle_instance['field_name'] = $field;
      $bundle_instance['bundle'] = $bundle['machine_name'];
      //Creo l'istanza
      $field_instances[] = $bundle_instance;
      field_create_instance($bundle_instance);
    }
  }
}

// Cancella i campi creati.
// Cancella le istanze dei campi create.
function ontology_documentation_disable() {
  global $bundles_fields, $field_instances;
  //Cancella i campi
  foreach (array_keys($bundles_fields) as $field_name)
    field_delete_field($field_name);
  //Cancella le istanze dei campi
  foreach ($field_instances as $instance)
    field_delete_instance($instance);
}

/**
 * Implements hook_schema().
 */
function ontology_documentation_schema() {
  $schema['ontology_documentation'] = array(
    'description' => 'Tabella per documentazione OWL',
    'fields' => array(
      'odid' => array(
        'description' => 'ID termine',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'rodid' => array(
        'description' => 'ID ultima revisione del termine',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default'  => 0,
      ),
      'title' => array(
        'description' => 'Nome termine',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'category' => array(
        'description' => 'Tipo entitÃ ',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => 'concept',
      ),
      'language' => array(
        'description' => 'Lingua',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => 'en',
      ),
      'uid' => array(
        'description' => 'ID user',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'Timestamp creazione',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'Timestamp modifica',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Pubblicata o no',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'indexes' => array(
      'category_type' => array('category'),
      'category_type_status' => array('category', 'status'),
      'user_uid' => array('uid'),
      'entity_created' => array('created'),
      'entity_changed' => array('changed'),
      'status' => array('status'),
    ),
    'unique keys' => array(
      'odid' => array('odid'),
      'rodid' => array('rodid'),
      'title' => array('title'),
    ),
    'primary key' => array('odid'),
    'foreign keys' => array(
      'ontology_documentation_type' => array('table' => 'ontology_documentation_type',
      'columns' => array('category' => 'category'),
     )),
  );
  $schema['ontology_documentation_revision'] = array(
    'description' => 'Tabella per le revisioni della documentazione OWL',
    'fields' => array(
      'odid' => array(
        'description' => 'ID termine a cui appartiene la revisione',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'rodid' => array(
        'description' => 'ID revisione',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'Nome termine',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'concept',
      ),
      'language' => array(
        'description' => 'Lingua',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => 'en',
      ),
      'uid' => array(
        'description' => 'ID user',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'Timestamp creazione',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Pubblicata o no',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'revisions_of_entity' => array('odid'),
      'revisions_of_entity_title' => array('title'),
      'revisions_user_id' => array('uid'),
    ),
    'primary key' => array('rodid'),
    'foreign keys' => array(
      'ontology_documentation' => array('table' => 'ontology_documentation',
      'columns' => array('odid' => 'odid')
      )
    ),
  );
  $schema['ontology_documentation_type'] = array(
    'description' => 'Tabella per i bundles',
    'fields' => array(
      'category' => array(
        'description' => 'Tipo di bunble',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Nome comune',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
     'description' => array(
       'descritpion' => 'Descrizione',
       'type' => 'varchar',
       'length' => 255,
       'not null' => TRUE,
     ),
     'locked' => array(
       'description' => 'Descrive lo stato nella UI',
       'type' => 'int',
       'not null' => TRUE,
       'default' => 1,
     ),
    ),
   'primary key' => array('category'),
   'unique keys' => array(
     'name' => array('name'),
   ),
  );

  return $schema;
}