<?php

// Definisco il tipo di entità da gestire
define('ENTITY_TYPE', 'ontology_documentation');
// Definisco il percorso del file di callback
define('FILE_PATH', drupal_get_path('module', ENTITY_TYPE));
// Definisco il nome del file di callback
define('CALLBACK_FILE', ENTITY_TYPE . '.callback.inc');
// Definisco il nome del file di admin per la UI
define('ADMIN_FILE', ENTITY_TYPE . '.admin.inc');
// Include il file con le funzioni di callback ontology_documentation_access().
require_once DRUPAL_ROOT. '/' . FILE_PATH . '/' . CALLBACK_FILE;
// Includo il file con il form per la UI di amministrazione
require_once DRUPAL_ROOT. '/' . FILE_PATH . '/' . ADMIN_FILE;

/**
 * Implements hook_help().
 */
function ontology_documentation_help($path, $arg) {
  switch ($path) {
    case "admin/help#ontology_documentation":
      $output['header'] = array(
        '#type' => 'html_tag',
        '#tag' => 'h3',
        '#value' => 'Help support for Tesi module'
      );
      $output['content'] = array(
        '#type' => 'html_tag',
        '#tag' => 'em',
        '#value' => 'Upgrade our OWL documentation pages',
      );
      break;
  }
  return drupal_render($output);
}

function ontology_documentation_permission() {

  $permission = array(
    'administer ontology_documentation entities' => array(
      'title' => t('Administer ontology documentation entities'),
      'description' => t('Allow users to configure ontology documentation entities'),
      'restricted access' => TRUE,
    ),
    'view ontology_documentation entities' => array(
      'title' => t('View ontology documentation entities'),
      'description' => t('Allow users to view ontology documentation entities'),
      'restricted access' => TRUE,
    ),
    'create ontology_documentation entities' => array(
      'title' => t('Create ontology documentation entities'),
      'description' => t('Allow user to create ontology documentation entities'),
      'retricted access' => TRUE,
    ),
    'edit any ontology_documentation entities' => array(
      'title' => t('Edit any ontology documentation entities'),
      'description' => t('Allow users to edit any ontology documentation entities'),
      'restricted access' => TRUE,
    ),
    'edit own ontology_documentation entities' => array(
      'title' => t('Edit own ontology documentation entities'),
      'description' => t('Allow users to edit own ontology documentation entities'),
      'restricted access' => TRUE,
    ),
  );

  return $permission;
}

/**
 * Implements hook_entity_info().
 */
function ontology_documentation_entity_info() {
  $entity_info[ENTITY_TYPE] = array(
   'label' => 'Ontology documentation type',
   'entity class' => 'OntologyDocumentation',
   'controller class' => 'OntologyDocumentationController',
   'base table' => 'ontology_documentation',
   'revision table' => 'ontology_documentation_revision',
   'fieldable' => TRUE,
   'entity keys' => array(
     'id' => 'odid',
     'revision' => 'rodid',
     'bundle' => 'category',
     'label' => 'title',
   ),
   'bundle keys' => array(
     'bundle' => 'category',
   ),
   'bundles' => array(),
   'view modes' => array(
     'full' => array(
       'label' => t('Full content'),
       'custom settings' => FALSE,
     ),
   ),

  // Le istruzioni che seguono sono necessarie per l'utilizzo della UI di Amministrazione offerta da Entity API.
  // entity_class_label() chiama il metodo defaultLabel() implementato dalla classe specificata in 'entity class'.
  // entity_class_uri() chiama il metodo defaultUri() implementato dalla classe specificata in 'entity class'.
  // test_tesi_access() implementa le direttive per l'accesso dei contenuti, viene chiamta dalla 'access callback' definita nei menu.
  'module' => 'ontology_documentation',
  'label callback' => 'entity_class_label',
  'uri callback' => 'entity_class_uri',
  'access callback' => 'ontology_documentation_access',
  'admin ui' => array(
    'path' => 'admin/structure/documentation-types',
    'controller class' => 'OntologyDocumentationUIController',
    'file' => 'ontology_documentation.admin.inc',
  ),
);
 return $entity_info;
}

/**
 * Implements hook_entity_info_alter().
 */
function ontology_documentation_entity_info_alter(&$entity_info) {
  foreach(ontology_documentation_get_bundles() as $bundle) {
    $entity_info[ENTITY_TYPE]['bundles'][$bundle['machine_name']] = array(
        'label' => $bundle['human_label'],
        'uri callback' => 'entity_class_uri',
        'admin' => array(
          'path' => 'admin/structure/documentation-types',
          //'bundle argument' => 4,
          //'real path' => 'admin/structure/documentation-types/manage/'.$bundle['machine_name'],
          //'access callback' => TRUE,
          //'access callback' => 'entity_access',
          //'access arguments' => array('edit', ENTITY_TYPE, 4, NULL),
        ),
    );
  }

}

/**
 * Implements hook_menu().
 */
function ontology_documentation_menu() {
  $items = array();

  $items['admin/config/mastro/ontology-documentation'] = array(
    'title' => 'Ontology Documentation',
    'description' => 'Upgrade OWL documentation pages',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ontology_documentation_config_form'),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', ENTITY_TYPE, NULL, NULL),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ontology_documentation.callback.inc',
  );

  $items['ontology-documentation/%/%ontology_documentation'] = array(
    'title' => 'Root',
    'load arguments' => array(0, 1),
    'access callback' => 'entity_access',
    'access arguments' => array('view', ENTITY_TYPE, 2, NULL),
    'page callback' => 'ontology_documentation_term_view',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'file' => 'ontology_documentation.callback.inc',
  );

  $items['ontology-documentation/%/%ontology_documentation/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'ontology_documentation.callback.inc',
    'weight' => -1,
  );

  $items['ontology-documentation/%/%ontology_documentation/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'ontology_documentation_term_edit',
    'page arguments' => array(2),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', ENTITY_TYPE, 2, NULL),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ontology_documentation.callback.inc',
  );

  /*$items['admin/structure/documentation-types/edit/%ontology_documentation'] = array(
    'title' => 'edit term',
    'page callback' => 'entity_ui_get_form',
    'page arguments' => array('ontology_documentation_admin_edit_form', 4),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', ENTITY_TYPE, 4, NULL),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'ontology_documentation.admin.inc',
  );*/

  return $items;
}

function ontology_documentation_load($term, $entity_type, $bundle) {
  //$bundles = &drupal_static(__FUNCTION__,array());

  //if(empty($bundles))
  //  $bundles = ontology_documentation_get_bundles();

  //foreach($bundles as $bundle_name)
  //  if($bundle == $bundle_name['machine_name']) {
  //    $check = TRUE;
  //    break;
  //  }

  //if(!$check)
  //  return FALSE;

  // Carico l'entità e ritorno l'oggetto entità
  $entity_type = str_replace('-', '_', $entity_type);
  $term = str_replace('-', '_', $term);
  $entity_query = new EntityFieldQuery();
  $entity_query_response = $entity_query->entityCondition('entity_type', $entity_type)
               ->entityCondition('bundle', $bundle)
               ->propertyCondition('title', $term)
               ->execute();

  if(!empty($entity_query_response)) {
    $entity_id = key($entity_query_response[$entity_type]);
    $entity = entity_load('ontology_documentation', array_keys($entity_query_response[$entity_type]));
    return $entity[$entity_id];
  }

  return FALSE;
}

function ontology_documentation_get_bundles($condition = 'ALL') {
  $bundles = &drupal_static(__FUNCTION__,array());

  if(empty($bundles)) {
    $bundles += array(
      array(
       'machine_name' => 'concept',
       'human_label' => 'Concept',
       'description' => 'Describe a specific owl concept',
      ),
      array(
       'machine_name' => 'role',
       'human_label' => 'Role',
       'description' => 'Describe a specific owl role',
      ),
      array(
        'machine_name' => 'attribute',
        'human_label' => 'Attribute',
        'description' => 'Describe a sepcific owl attribute',
      ),
    );
  }

  switch($condition) {
    case 'ALL':
      // Tutti e tre
      return array_slice($bundles, 0,3);
      break;
    case 'WITH_DOMAIN_AND_CODOMAIN':
      // Role,Attribute
      return array_slice($bundles, 1,2);
      break;
    case 'WITH_INHERITANCE':
      // Cocept,Role
      return array_slice($bundles, 0,2);
      break;
    case 'WITH_ATTRIBUTES_AND_ROLES':
      // Concept
      return array_slice($bundles, 0,1);
      break;
  }
}