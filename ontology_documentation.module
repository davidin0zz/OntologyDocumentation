<?php

// Definisco il tipo di entità da gestire
define('__documentation_type__', 'ontology_documentation');
// Definisco l'url per le pagina della docoumentazione
define('__documentation_base_url__', 'ontology-documentation');
// Definisco l'url per le pagina di ragionamento
define('__reasoning_relative_path__', 'intensional-reasoning');
// Definisco l'url per le pagina dei mappings
define('__mappings_relative_path__', 'mappings/ontology');

/**
 * Implements hook_help().
 */
function ontology_documentation_help($path, $arg) {
  switch ($path) {
    case "admin/help#ontology_documentation":
      $output['header'] = array(
        '#type' => 'html_tag',
        '#tag' => 'h3',
        '#value' => 'Ontology documentation'
      );
      $output['content'] = array(
        '#type' => 'html_tag',
        '#tag' => 'em',
        '#value' => 'Upgrade OWL documentation pages',
      );
      break;
  }
  return drupal_render($output);
}

/**
 * Implements hook_entity_info().
 */
function ontology_documentation_entity_info() {
  $entity_info['ontology_documentation'] = array(
    'label' => 'Ontology documentation',
    'entity class' => 'OntologyDocumentation',
    'controller class' => 'OntologyDocumentationController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'ontology_documentation',
    'revision table' => 'ontology_documentation_revision',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'odid',
      'revision' => 'rodid',
      'bundle' => 'category',
      'label' => 'title',
    ),
    'bundle keys' => array(
      'bundle' => 'category',
    ),
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
      'label' => t('Full Content'),
      'custom settings' => FALSE,
      ),
    ),
    'module' => 'ontology_documentation',
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'access callback' => 'ontology_documentation_access',
    'admin ui' => array(
      'path' => 'admin/ontology-documentation',
      'file' => 'ontology_documentation.admin.inc',
      'controller class' => 'OntologyDocumentationUIController',
    ),
  );
  $entity_info['ontology_documentation_type'] = array(
    'label' => 'Ontology documentation type',
    'entity class' => 'OntologyDocumentationType',
    'controller class' => 'OntologyDocumentationTypeController',
    'base table' => 'ontology_documentation_type',
    'fieldable' => FALSE,
    'bundle of' => 'ontology_documentation',
    'entity keys' => array(
      'id' => 'category',
      'label' => 'title',
    ),
    'module' => 'ontology_documentation',
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'access callback' => 'ontology_documentation_access',
    'admin ui' => array(
      'path' => 'admin/structure/ontology-documentation-types',
      'file' => 'ontology_documentation.admin.inc',
      'controller class' => 'OntologyDocumentationTypeUIController',
    ),
  );

 return $entity_info;
}

/**
 * Implements hook_entity_property_info().
 */
function ontology_documentation_entity_property_info() {
  $entity_property_info = array();

  $entity_property_info[__documentation_type__]['properties'] = array(
    'id' => array(
      'label' => t('Ontology documentation id'),
      'description' => t('The id of the ontology term'),
      'type' => 'integer',
      'schema field' => 'odid',
     ),
    'rid' => array(
      'label' => t('Ontology documentation revision id'),
      'description' => t('The revision id of the ontology term'),
      'type' => 'integer',
      'schema field' => 'rodid',
    ),
    'name' => array(
      'label' => t('Ontology documentation title'),
      'description' => t('The title of the ontology term'),
      'type' => 'text',
      'schema field' => 'title',
    ),
    'type' => array(
      'label' => t('Ontology documentation categoty'),
      'description' => t('The category of the ontology term'),
      'type' => 'entity',
      'schema field' => 'category',
    ),
    'lang' => array(
      'label' => t('Ontology documentation language'),
      'description' => t('The language of the ontology term'),
      'type' => 'text',
      'schema field' => 'language',
    ),
    'uid' => array(
      'label' => t('Ontology documentation uid'),
      'description' => t('The user id creator of the ontology term'),
      'type' => 'integer',
      'schema field' => 'uid',
    ),
    'creation_date' => array(
      'label' => t('Ontology documentation created date'),
      'description' => t('The timestamp creation of the ontology term'),
      'type' => 'date',
      'schema field' => 'created',
    ),
    'modification_date' => array(
      'label' => t('Ontology documentation cached date'),
      'description' => t('The timestamp modification of the ontology term'),
      'type' => 'date',
      'schema field' => 'changed',
    ),
  );

  return $entity_property_info;
}

/**
 * Implements hook_entity_info_alter().
 */
function ontology_documentation_entity_info_alter(&$entity_info) {
  foreach (ontology_documentation_get_bundles() as $bundle) {
    $entity_info['ontology_documentation']['bundles'][$bundle['machine_name']] = array(
      'label' => $bundle['human_label'],
      'uri callback' => 'entity_class_uri',
      'admin' => array(
        'path' => 'admin/structure/ontology-documentation-types/manage/%ontology_documentation_type',
        'bundle argument' => 4,
        'real path' => 'admin/structure/ontology-documentation-types/manage/' . $bundle['machine_name'],
        ),
    );
  }
}

/**
 * Implements hook_admin_paths().
 */
function ontology_documentation_admin_paths() {
  $paths = array(
    __documentation_base_url__.'/*/*/edit' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_menu().
 */
function ontology_documentation_menu() {
  $items = array();

  $items['admin/config/mastro/'.__documentation_base_url__] = array(
    'title' => 'Ontology Documentation',
    'description' => 'Upgrade OWL documentation pages',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ontology_documentation_config_form'),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', __documentation_type__, NULL, NULL),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ontology_documentation.callback.inc',
  );
  $items[__documentation_base_url__.'/%/%ontology_documentation'] = array(
    'title' => 'Root',
    'load arguments' => array(0, 1),
    'access callback' => 'entity_access',
    'access arguments' => array('view', __documentation_type__, 2, NULL),
    'page callback' => 'ontology_documentation_term_view',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'file' => 'ontology_documentation.callback.inc',
  );
  $items[__documentation_base_url__.'/%/%ontology_documentation/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'ontology_documentation.callback.inc',
    'weight' => -1,
  );
  $items[__documentation_base_url__.'/%/%ontology_documentation/edit'] = array(
    'title' => 'Edit',
    'load arguments' => array(0, 1),
    'page callback' => 'entity_ui_get_form',
    'page arguments' => array('ontology_documentation', 2, 'edit'),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', __documentation_type__, 2, NULL),
    'file' => 'ontology_documentation.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

 /**
  *
  * Togliere il commento se si vuole implementare la possibilità
  * di aggiungere nuova documentazione per un nuovo termine creato a mano.
  * Le funzioni di callback sono definite nel file ontology_documentation.callback.inc.
  * Ricordarsi di scommentare anche le parti nel file *.install
  *
  **/
  /*
  $items['admin/'.__documentation_base_url__.'/add'] = array(
    'title' => 'Add Ontology documentation',
    'page callback' => 'system_admin_menu_block_page',
    'access callback' => 'entity_access',
    'access arguments' => array('create', __documentation_type__, NULL, NULL),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/'.__documentation_base_url__.'/add/concept'] = array(
    'title' => 'Add Concept',
    'description' => 'Allow you to create a new OWL concept',
    'page callback' => 'ontology_documentation_concept_create',
    'access callback' => 'entity_access',
    'access arguments' => array('create', __documentation_type__, NULL, NULL),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ontology_documentation.callback.inc',
  );
  $items['admin/'.__documentation_base_url__.'/add/role'] = array(
    'title' => 'Add Role',
    'description' => 'Allow you to create a new OWL role',
    'page callback' => 'ontology_documentation_role_create',
    'access callback' => 'entity_access',
    'access arguments' => array('create', __documentation_type__, NULL, NULL),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ontology_documentation.callback.inc',
  );
  $items['admin/'.__documentation_base_url__.'/add/attribute'] = array(
    'title' => 'Add Attribute',
    'description' => 'Allow you to create a new OWL attribute',
    'page callback' => 'ontology_documentation_attribute_create',
    'access callback' => 'entity_access',
    'access arguments' => array('create', __documentation_type__, NULL, NULL),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ontology_documentation.callback.inc',
  );
  */

  return $items;
}

function ontology_documentation_menu_alter(&$items) {
  if (isset($items['admin/ontology-documentation/add'])) {
    unset($items['admin/ontology-documentation/add']);
  }
  if (isset($items['admin/structure/ontology-documentation-types/add'])) {
    unset($items['admin/structure/ontology-documentation-types/add']);
  }
}

// Nascondo il titolo dei campi per ogni campo di tipo '__documentation_type__'
function ontology_documentation_preprocess_field(&$variables) {
  if ($variables['element']['#entity_type'] == __documentation_type__) {
    $variables['label_hidden'] = TRUE;
  }
}

function ontology_documentation_load($entity_name, $entity_type = NULL, $bundle = NULL) {
  // Carico l'entità e ritorno l'oggetto entità
  $entity_type = str_replace('-', '_', $entity_type);
  $entity_name = str_replace('-', '_', $entity_name);
  $entity_query = new EntityFieldQuery();
  $entity_query_response = $entity_query->entityCondition('entity_type', $entity_type)
               ->entityCondition('bundle', $bundle)
               ->propertyCondition('title', $entity_name)
               ->execute();

  if (!empty($entity_query_response)) {
    $id = key($entity_query_response[$entity_type]);
    $entity = entity_load($entity_type, array($id));
    return $entity[$id];
  }
  return FALSE;
}

function ontology_documentation_type_load($bundle_type_name) {
  $entity = entity_load('ontology_documentation_type', array($bundle_type_name));
  return reset($entity);
}

function ontology_documentation_get_bundles($condition = 'ALL') {
  $bundles = &drupal_static(__FUNCTION__,array());

  if (empty($bundles)) {
    $bundles += array(
      array(
       'machine_name' => 'concept',
       'human_label' => 'Concept',
       'description' => 'Describe a specific owl concept',
      ),
      array(
       'machine_name' => 'role',
       'human_label' => 'Role',
       'description' => 'Describe a specific owl role',
      ),
      array(
        'machine_name' => 'attribute',
        'human_label' => 'Attribute',
        'description' => 'Describe a sepcific owl attribute',
      ),
    );
  }

  switch ($condition) {
    case 'ALL':
      // Tutti e tre
      return array_slice($bundles, 0,3);
      break;
    case 'WITH_DOMAIN_AND_CODOMAIN':
      // Role,Attribute
      return array_slice($bundles, 1,2);
      break;
    case 'WITH_INHERITANCE':
      // Cocept,Role
      return array_slice($bundles, 0,2);
      break;
    case 'WITH_ATTRIBUTES_AND_ROLES':
      // Concept
      return array_slice($bundles, 0,1);
      break;
  }
}

function ontology_documentation_permission() {
  $permission = array(
    'administer ontology_documentation entities' => array(
      'title' => t('Administer ontology documentation entities'),
      'description' => t('Allow users to configure ontology documentation entities'),
      'restricted access' => TRUE,
    ),
    'view ontology_documentation entities' => array(
      'title' => t('View ontology documentation entities'),
      'description' => t('Allow users to view ontology documentation entities'),
      'restricted access' => TRUE,
    ),
    'create ontology_documentation entities' => array(
      'title' => t('Create ontology documentation entities'),
      'description' => t('Allow user to create ontology documentation entities'),
      'retricted access' => TRUE,
    ),
    'edit any ontology_documentation entities' => array(
      'title' => t('Edit any ontology documentation entities'),
      'description' => t('Allow users to edit any ontology documentation entities'),
      'restricted access' => TRUE,
    ),
    'edit own ontology_documentation entities' => array(
      'title' => t('Edit own ontology documentation entities'),
      'description' => t('Allow users to edit own ontology documentation entities'),
      'restricted access' => TRUE,
    ),
  );

  return $permission;
}

function ontology_documentation_access($op, $entity, $account, $entity_type) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  // CONTROLLARE QUI!!
  if (isset($entity->uid))
    $entity_owner = $entity->uid;
  else
    $entity_owner = FALSE;

  if (!empty($op)) {
    if ($op == 'create')
      return user_access('administer ontology_documentation entities', $account) ||
             user_access('create ontology_documentation entities', $account);
    elseif ($op == 'view')
      return user_access('administer ontology_documentation entities', $account) ||
             user_access('view ontology_documentation entities', $account);
    // Per la gestione della UI di amministrazione
    elseif ($op == 'manage' || $op == 'update' || $op == 'delete')
      return user_access('administer ontology_documentation entities', $account);
    elseif ($op == 'edit')
      return user_access('administer ontology_documentation entities', $account) ||
             user_access('edit any ontology_documentation entities', $account)   ||
             user_access('edit own ontology_documentation entities', $account)   &&
             $account->uid == $entity_owner && $entity->entityType() == $entity_type;
  }
  else
    return FALSE;
}